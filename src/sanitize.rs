use flarmnet::Record;

fn sanitize_for_lx(value: &str) -> String {
    sanitize(value)
}

fn sanitize_for_xcsoar(value: &str) -> String {
    if encoding_rs::mem::is_str_latin1(value) {
        value.to_string()
    } else {
        sanitize(value)
    }
}

fn sanitize(value: &str) -> String {
    let string = value
        .replace("Ã¤", "ae")
        .replace("Ã¶", "oe")
        .replace("Ã¼", "ue")
        .replace("Ã„", "Ae")
        .replace("Ã–", "Oe")
        .replace("Ãœ", "Ue")
        .replace("ÃŸ", "ss");
    deunicode::deunicode(&string)
}

pub fn sanitize_record_for_lx(record: &Record) -> Record {
    Record {
        flarm_id: sanitize_for_lx(&record.flarm_id),
        pilot_name: sanitize_for_lx(&record.pilot_name),
        airfield: sanitize_for_lx(&record.airfield),
        plane_type: sanitize_for_lx(&record.plane_type),
        registration: sanitize_for_lx(&record.registration),
        call_sign: sanitize_for_lx(&record.call_sign),
        frequency: sanitize_for_lx(&record.frequency),
    }
}

pub fn sanitize_record_for_xcsoar(record: &Record) -> Record {
    Record {
        flarm_id: sanitize_for_xcsoar(&record.flarm_id),
        pilot_name: sanitize_for_xcsoar(&record.pilot_name),
        airfield: sanitize_for_xcsoar(&record.airfield),
        plane_type: sanitize_for_xcsoar(&record.plane_type),
        registration: sanitize_for_xcsoar(&record.registration),
        call_sign: sanitize_for_xcsoar(&record.call_sign),
        frequency: sanitize_for_xcsoar(&record.frequency),
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_sanitize_for_lx() {
        assert_eq!(sanitize_for_lx("foo"), "foo");
        assert_eq!(sanitize_for_lx("MÃ¼ller"), "Mueller");
        assert_eq!(sanitize_for_lx("PociÅ«nai"), "Pociunai");
        assert_eq!(sanitize_for_lx("ðŸ˜‚"), "joy");
    }

    #[test]
    fn test_sanitize_for_xcsoar() {
        assert_eq!(sanitize_for_xcsoar("foo"), "foo");
        assert_eq!(sanitize_for_xcsoar("MÃ¼ller"), "MÃ¼ller");
        assert_eq!(sanitize_for_xcsoar("PociÅ«nai"), "Pociunai");
        assert_eq!(sanitize_for_xcsoar("ðŸ˜‚"), "joy");
    }
}
